local cassandra = require "cassandra"

describe("Auth Providers", function()
  it("cassandra module should have auth providers table", function()
    assert.is_table(cassandra.auth)
    assert.truthy(cassandra.auth.PlainTextProvider)
  end)

  describe("PlainTextProvider", function()
    it("should be instanciable", function()
      local auth = cassandra.auth.PlainTextProvider("username", "password")
      assert.truthy(auth)
    end)
    it("should require a username", function()
      assert.has_error(function()
        cassandra.auth.PlainTextProvider()
      end, "No username provided")
    end)
    it("should require a password", function()
      assert.has_error(function()
        cassandra.auth.PlainTextProvider("username")
      end, "No password provided")
      local trace = debug.traceback()
      local match = string.find(trace, "stack traceback:\n\tspec/01-unit/auth_providers_spec.lua", nil, true)
      assert.equal(1, match)
    end)
    it("should implement initial_response()", function()
      local auth = cassandra.auth.PlainTextProvider("username", "password")
      assert.is_function(auth.initial_response)
    end)
    describe("initial_response()", function()
      it("should return properly formatted message", function()
        local auth = cassandra.auth.PlainTextProvider("username", "password")
        local msg = auth:initial_response()
        assert.equal("\0username\0password", msg)
      end)
    end)
  end)
end)
